import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import joblib
import seaborn as sns

from sklearn.metrics import silhouette_score
from sklearn.decomposition import PCA

# CARREGANDO MODELOS PARA CONSUMIR
gmm_model = joblib.load("results/modelo_gmm_bairros.pkl")
scaler = joblib.load("results/scaler.pkl")

# CARREGANDO DADOS
dataset = pd.read_csv("datasets/bairros_joao_pessoa_clusterizacao.csv")
x = dataset.drop(columns=["nome_bairro"])
x_scaled = scaler.transform(x)

# APLICANDO PCA
pca = PCA(n_components=3, random_state=42)
x_pca = pca.fit_transform(x_scaled)

# PREDI√á√ÉO DOS CLUSTERS
labels = gmm_model.predict(x_pca)
dataset["Cluster"] = labels

# INTERFACE -----------------------------------------------------------------------------------
st.set_page_config(page_title="Clusteriza√ß√£o de Bairros - Jo√£o Pessoa", layout="wide")

st.title("üìç Clusteriza√ß√£o de Bairros ‚Äì Jo√£o Pessoa")
st.markdown("""Esse aplicativo busca agrupar os bairros da cidade de Jo√£o Pessoa (PB) de acordo
            com caracter√≠sticas socioecon√¥micas. Isso √© feito atrav√©s de um modelo de 
            clusteriza√ß√£o implementado com o algoritmo Gaussian Mixture Models (GMM).
""")

# M√âTRICA: Mostrando a nota do modelo no silhouette score --------------------------------------
with st.container():
    st.subheader("üìä Avalia√ß√£o do Modelo")
    sil_score = silhouette_score(x_pca, labels)
    st.metric("Silhouette Score", round(sil_score, 3))
    st.markdown("O Silhouette Score mede a qualidade da separa√ß√£o entre os grupos encontrados.")

# ----------------------------------------------------------------------------------------------
col1, col2 = st.columns(2)

# TABELA: Nomes dos bairros e o cluster ao qual pertencem
with col1:
    st.subheader("Bairros e seus clusters")  
    st.dataframe(dataset[["nome_bairro", "Cluster"]].sort_values("Cluster"))

# GR√ÅFICO: Contagem de bairros por cluster (gr√°fico de barras)
with col2:
    st.subheader("Distribui√ß√£o por Cluster")
    st.bar_chart(dataset["Cluster"].value_counts().sort_index())

# ----------------------------------------------------------------------------------------------
col3, col4 = st.columns(2)

# GR√ÅFICO: Plotagem dos clusters com PCA
with col3:
    st.subheader("Visualiza√ß√£o em 2D dos Clusters (PCA)")
    fig, ax = plt.subplots()
    sns.scatterplot(x=x_pca[:, 0], y=x_pca[:, 1], hue=labels, palette="Set2", s=80, ax=ax)
    plt.xlabel("Componente 1")
    plt.ylabel("Componente 2")
    plt.title("Clusters de bairros - PCA")
    st.pyplot(fig)

# GR√ÅFICO: M√©dia dos indicadores por cluster
with col4:
    st.subheader("M√©dia dos Indicadores por Cluster")
    cluster_means = dataset.groupby("Cluster").mean(numeric_only=True)

    fig2, ax2 = plt.subplots(figsize=(10, 6))
    sns.heatmap(cluster_means.T, cmap="viridis", annot=True, fmt=".2f", ax=ax2)
    plt.title("Indicadores m√©dios por cluster (heatmap)")
    st.pyplot(fig2)

# GR√ÅFICO: M√©dia de uma vari√°vel espec√≠fica por cluster --------------------------------------
col5, col6, col7 = st.columns([1, 2, 1])

with col6:
    st.subheader("Comparar vari√°vel por cluster")
    st.markdown(
        "Selecione uma vari√°vel socioecon√¥mica abaixo para visualizar sua m√©dia por cluster. "
        "Isso ajuda a entender o perfil m√©dio de cada grupo formado pela clusteriza√ß√£o."
    )

    # Select e c√°lculo do valor m√©dio da vari√°vel
    variavel_escolhida = st.selectbox("Escolha uma vari√°vel:", x.columns)
    medias_por_cluster = dataset.groupby("Cluster")[variavel_escolhida].mean()

    fig3, ax3 = plt.subplots(figsize=(5, 3))  # Tamanho menor
    medias_por_cluster.plot(kind='bar', ax=ax3, color='skyblue')
    ax3.set_xlabel("Cluster")
    ax3.set_ylabel(f"M√©dia de {variavel_escolhida}")
    ax3.set_title(f"M√©dia de '{variavel_escolhida}' por Cluster")
    plt.xticks(rotation=0)
    st.pyplot(fig3)
